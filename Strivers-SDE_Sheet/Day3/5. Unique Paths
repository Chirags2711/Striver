//Tabulation
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m+1][n+1];
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                if(i == m-1 && j == n-1){
                    dp[i][j] = 1;
                    continue;
                }
                int ans1 = (i+1 < m) ? dp[i+1][j] : 0;
                int ans2 = (j+1 < n) ? dp[i][j+1]: 0;
                dp[i][j] = ans1 + ans2;
            }
        }
        return dp[0][0];
    }
}

//Memo
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int arr[]: dp){
            Arrays.fill(arr, -1);
        }
        return uniquePathsHelper(0, 0, m, n, dp);
    }
    public int uniquePathsHelper(int i, int j, int m, int n, int dp[][]){
        if(i == m-1 && j==n-1) return 1;
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int down = uniquePathsHelper(i+1, j, m, n, dp);
        int right = uniquePathsHelper(i, j+1, m, n, dp);
        return dp[i][j] = down + right;
    }
}

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		return subarraySum(nums, k);
	}
	public static int subarraySum(int[] nums, int k) {
        HashMap<Long, Integer> prefixSum = new HashMap<>();
        int ans = 0;
		long sum = 0;
		int n = nums.length;
        for(int i=0; i<n; i++){
            sum += nums[i];
            if(sum == k) {
				ans = i+1;
			}
            if(prefixSum.containsKey(sum-k)){
                ans = Math.max(ans, i - prefixSum.get(sum-k));
            }
            if(!prefixSum.containsKey(sum)) prefixSum.put(sum, i);
        }
        return ans;
    }
}

// 560. Subarray Sum Equals K
class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> prefixSum = new HashMap<>();
        int ans = 0, sum = 0;
        for(int num: nums){
            sum += num;
            if(sum == k) ans++;
            if(prefixSum.containsKey(sum-k)){
                ans += prefixSum.get(sum-k);
            }
            prefixSum.put(sum, prefixSum.getOrDefault(sum, 0) + 1);
        }
        return ans;
    }
}

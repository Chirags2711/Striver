// DP Memo
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        Boolean dp[] = new Boolean[n+1];
        return fun(0, n, nums, dp);
    }
    public boolean fun(int i, int n, int nums[], Boolean []dp){
        if(i==n-1){
            return true;
        }
        if(i>=n){
            return false;
        }
        if(dp[i]!=null){
            return dp[i];
        }
        for(int jumps = 1; jumps <= nums[i]; jumps++){
            if(fun(i+jumps, n, nums, dp)){
                return true;
            }
        }
        return dp[i] = false;
    }
}

// DP Tabulate
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        boolean dp[] = new boolean[n];
        dp[n-1] = true;
        for(int i=n-2; i>=0; i--){
            for(int jumps = 1; jumps <= nums[i]; jumps++){
                if(i+jumps<n && dp[i+jumps]){
                    dp[i] = true;
                }
            }
        }
        return dp[0];
    }
}

// Greedy Neetcode
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int goal = n-1;
        for(int i=n-2; i>=0; i--){
            if(i + nums[i] >= goal){
                goal = i;
            }
        }
        return goal ==0;
    }
}

// Greedy Jump Game II Neetcode
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int l = 0, r = 0;
        while(r<n-1){
            int farthest = 0;
            for(int i=l; i<=r; i++){
                farthest = Math.max(farthest, i+nums[i]);
            }
            l = r+1;
            r = farthest;
            if(l>r && r!=n-1) return false;
        }
        return true;
    }
}

//Greedy Striver
class Solution {
    public boolean canJump(int[] nums) {
        // If no 0, always reach
        // If 0 present and we can cross it, reach, else not reach
        int n = nums.length;
        int maxIndex = 0;
        for(int i=0; i<n; i++){
            if(i>maxIndex) return false;
            maxIndex = Math.max(maxIndex, i + nums[i]);
            if(maxIndex >= n-1) return true;
        }
        return true;
    }
}

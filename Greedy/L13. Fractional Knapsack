/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class Pair{
    double vPerW;
    int weight;
    Pair(double i, int j){
        vPerW = i;
        weight = j;
    }
}
class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item arr[], int n) {
        Pair a[] = new Pair[n];
        for(int i=0; i<n; i++){
            a[i] = new Pair(arr[i].value * 1.0 / arr[i].weight, arr[i].weight);
        }
        Arrays.sort(a, new Comparator<Pair>(){
            public int compare(Pair i, Pair j){
                if(j.vPerW >= i.vPerW){
                    return 1;
                }else{
                    return -1;
                }
            }
        });
        double ans = 0;
        int index = 0;
        while(w>=0 && index < n){
            Pair curr = a[index++];
            int currW = curr.weight;
            ans += (Math.min(currW, w) * curr.vPerW);
            w -= currW;
        }
        return ans;
    }
    
}

1. Integers in pq

class Solution {
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    ArrayList<Integer> dijkstra(ArrayList<ArrayList<iPair>> adj, int src) {
        int n = adj.size();
        int dist[] = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return dist[a] - dist[b];
            }
        });
        pq.offer(src);
        
        while(!pq.isEmpty()){
            int u = pq.poll();
            for(iPair nei: adj.get(u)){
                int v = nei.first;
                int eW = nei.second;
                if(dist[u] + eW < dist[v]){
                    dist[v] = dist[u] + eW;
                    pq.offer(v);
                }
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for(int d: dist){
            ans.add(d);
        }
        return ans;
    }
}

2. Pair class in pq

class Pair{
    int distance;
    int node;
    public Pair(int d, int n){
        distance = d;
        node = n;
    }
}

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {
        // Write your code here
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        fun(S, adj, dist);
        return dist;
    }
    static void fun(int S, ArrayList<ArrayList<ArrayList<Integer>>> adj, int[] dist){
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        dist[S] = 0;
        pq.offer(new Pair(0, S));
        while(!pq.isEmpty()){
            Pair p = pq.poll();
            int currNode = p.node;
            int currDist = p.distance;
            for(List<Integer> neiList: adj.get(currNode)){
                int nei = neiList.get(0);
                int edgeWt = neiList.get(1);
                if(currDist + edgeWt < dist[nei]){
                    dist[nei] = currDist + edgeWt;
                    pq.offer(new Pair(dist[nei], nei));
                }
            }
        }
    }
}

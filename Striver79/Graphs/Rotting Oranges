class Tuple{
    int x, y;
    public Tuple(int _x, int _y){
        x = _x;
        y = _y;
    }
}
class Solution {
    int dx[] = {0, 0, 1, -1};
    int dy[] = {1, -1, 0, 0};
    public int orangesRotting(int[][] grid) {
        Queue<Tuple> q = new LinkedList<>();
        int m = grid.length, n = grid[0].length;
        int count = 0;
        for(int i=0; i < m; i++){
            for(int j=0; j < n; j++){
                if(grid[i][j] == 2){
                    q.offer(new Tuple(i, j));
                }else if(grid[i][j] == 1){
                    count++;
                }
            }
        }
        if(count == 0) return 0;
        int time = 0;
        while(!q.isEmpty()){
            int size = q.size();
            while(size-- > 0){
                Tuple pop = q.poll();
                for(int d = 0; d < 4; d++){
                    int adjX = pop.x + dx[d];
                    int adjY = pop.y + dy[d];
                    if(adjX >=0 && adjY >=0 && adjX < m && adjY < n && grid[adjX][adjY] == 1){
                        grid[adjX][adjY] = 2;
                        count--;
                        q.offer(new Tuple(adjX, adjY));
                    }
                }
            }
            time++;
        }
        return count == 0 ? time-1 : -1;
    }
}

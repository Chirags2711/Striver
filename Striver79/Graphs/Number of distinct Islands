https://www.geeksforgeeks.org/problems/number-of-distinct-islands/1
// like O1L2R4L3D7
class Solution {
    Set<List<String>> set;
    boolean[][] vis;
    int[][] grid;
    int n, m;
    int countDistinctIslands(int[][] grid) {
        set = new HashSet<>();
        this.grid = grid;
        this.n = grid.length;
        this.m = grid[0].length;
        vis = new boolean[n][m];
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1 && !vis[i][j]){
                    List<String> list = new ArrayList<>();
                    DFS(i, j, list, 'O', 0);
                    set.add(list);
                }
            }
        }
        
        return set.size();
    }
    public void DFS(int i, int j, List<String> list, char ch, int gap){
        if(i < 0 || j < 0 || i >= n || j >= m || vis[i][j] || grid[i][j] == 0){
            return;
        }
        list.add(""+ch+gap);
        vis[i][j] = true;
        DFS(i-1, j, list, 'U', gap+1);
        DFS(i+1, j, list, 'D', gap+1);
        DFS(i, j+1, list, 'R', gap+1);
        DFS(i, j-1, list, 'L', gap+1);
    }
}


// OR


// like 00,0-1,0-2,1-2...
class Solution {

    int countDistinctIslands(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean vis[][] = new boolean[m][n];
        Set<List<String>> set = new HashSet<>();
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1 && !vis[i][j]){
                    List<String> list = new ArrayList<>();
                    DFS(i, j, list, vis, grid, i, j);
                    set.add(list);
                }
            }
        }
        return set.size();
    }
    void DFS(int i, int j, List<String> list, boolean[][] vis, int[][] grid, int baseI, int baseJ){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] == 0 || vis[i][j]) return;
        list.add(Integer.toString(i-baseI)+" "+Integer.toString(j-baseJ));
        vis[i][j] = true;
        DFS(i+1, j, list, vis, grid, baseI, baseJ);
        DFS(i, j+1, list, vis, grid, baseI, baseJ);
        DFS(i-1, j, list, vis, grid, baseI, baseJ);
        DFS(i, j-1, list, vis, grid, baseI, baseJ);
    }
}
